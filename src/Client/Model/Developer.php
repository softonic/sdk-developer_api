<?php
/**
 * Developer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\DeveloperApiSdk
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: dev
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\DeveloperApiSdk\Client\Model;

use \ArrayAccess;

/**
 * Developer Class Doc Comment
 *
 * @category    Class
 * @package     Softonic\DeveloperApiSdk
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Developer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Developer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_developer' => 'string',
        'name' => 'string',
        'email' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_developer' => null,
        'name' => null,
        'email' => null,
        'url' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id_developer' => 'id_developer',
        'name' => 'name',
        'email' => 'email',
        'url' => 'url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id_developer' => 'setIdDeveloper',
        'name' => 'setName',
        'email' => 'setEmail',
        'url' => 'setUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id_developer' => 'getIdDeveloper',
        'name' => 'getName',
        'email' => 'getEmail',
        'url' => 'getUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_developer'] = isset($data['id_developer']) ? $data['id_developer'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id_developer'] === null) {
            $invalid_properties[] = "'id_developer' can't be null";
        }
        if (!preg_match("/^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/", $this->container['id_developer'])) {
            $invalid_properties[] = "invalid value for 'id_developer', must be conform to the pattern /^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 100)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 200)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['url']) && (strlen($this->container['url']) > 200)) {
            $invalid_properties[] = "invalid value for 'url', the character length must be smaller than or equal to 200.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id_developer'] === null) {
            return false;
        }
        if (!preg_match("/^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/", $this->container['id_developer'])) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 100) {
            return false;
        }
        if (strlen($this->container['email']) > 200) {
            return false;
        }
        if (strlen($this->container['url']) > 200) {
            return false;
        }
        return true;
    }


    /**
     * Gets id_developer
     * @return string
     */
    public function getIdDeveloper()
    {
        return $this->container['id_developer'];
    }

    /**
     * Sets id_developer
     * @param string $id_developer Developer identifier
     * @return $this
     */
    public function setIdDeveloper($id_developer)
    {

        if ((!preg_match("/^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/", $id_developer))) {
            throw new \InvalidArgumentException("invalid value for $id_developer when calling Developer., must conform to the pattern /^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/.");
        }

        $this->container['id_developer'] = $id_developer;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Developer name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Developer., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Developer email
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Developer., must be smaller than or equal to 200.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url Developer url
     * @return $this
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (strlen($url) > 200)) {
            throw new \InvalidArgumentException('invalid length for $url when calling Developer., must be smaller than or equal to 200.');
        }

        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Softonic\DeveloperApiSdk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Softonic\DeveloperApiSdk\ObjectSerializer::sanitizeForSerialization($this));
    }
}


