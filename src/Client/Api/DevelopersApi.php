<?php
/**
 * DevelopersApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\DeveloperApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Restful API based on CoreAPI technology
 *
 * Add your description here
 *
 * OpenAPI spec version: 1.0.12-47
 * Contact: XXXXXXXXX@softonic.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\DeveloperApiSdk\Client\Api;

use \Softonic\DeveloperApiSdk\ApiClient;
use \Softonic\DeveloperApiSdk\ApiException;
use \Softonic\DeveloperApiSdk\Configuration;
use \Softonic\DeveloperApiSdk\ObjectSerializer;

/**
 * DevelopersApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\DeveloperApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DevelopersApi
{
    /**
     * API Client
     *
     * @var \Softonic\DeveloperApiSdk\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Softonic\DeveloperApiSdk\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Softonic\DeveloperApiSdk\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Softonic\DeveloperApiSdk\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Softonic\DeveloperApiSdk\ApiClient $apiClient set the API client
     *
     * @return DevelopersApi
     */
    public function setApiClient(\Softonic\DeveloperApiSdk\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation findDeveloper
     *
     * List of Developers
     *
     * @param int $page Page of the pagination when listing (optional)
     * @param int $limit Number of results per page when listing (optional)
     * @param string $search Field to search for (optional)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return \Softonic\DeveloperApiSdk\Client\Model\Developer[]
     */
    public function findDeveloper($page = null, $limit = null, $search = null)
    {
        list($response) = $this->findDeveloperWithHttpInfo($page, $limit, $search);
        return $response;
    }

    /**
     * Operation findDeveloperWithHttpInfo
     *
     * List of Developers
     *
     * @param int $page Page of the pagination when listing (optional)
     * @param int $limit Number of results per page when listing (optional)
     * @param string $search Field to search for (optional)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return array of \Softonic\DeveloperApiSdk\Client\Model\Developer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findDeveloperWithHttpInfo($page = null, $limit = null, $search = null)
    {
        if (!is_null($page) && ($page < 1)) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling DevelopersApi.findDeveloper, must be bigger than or equal to 1.');
        }

        if (!is_null($limit) && ($limit > 50)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DevelopersApi.findDeveloper, must be smaller than or equal to 50.');
        }
        if (!is_null($limit) && ($limit < 1)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DevelopersApi.findDeveloper, must be bigger than or equal to 1.');
        }

        if (!is_null($search) && (strlen($search) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$search" when calling DevelopersApi.findDeveloper, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/developers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\DeveloperApiSdk\Client\Model\Developer[]',
                '/developers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Softonic\DeveloperApiSdk\Client\Model\Developer[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\DeveloperApiSdk\Client\Model\Developer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation readDeveloper
     *
     * Fetches a single Developer
     *
     * @param string $id_developer Developer identifier (required)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return \Softonic\DeveloperApiSdk\Client\Model\Developer
     */
    public function readDeveloper($id_developer)
    {
        list($response) = $this->readDeveloperWithHttpInfo($id_developer);
        return $response;
    }

    /**
     * Operation readDeveloperWithHttpInfo
     *
     * Fetches a single Developer
     *
     * @param string $id_developer Developer identifier (required)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return array of \Softonic\DeveloperApiSdk\Client\Model\Developer, HTTP status code, HTTP response headers (array of strings)
     */
    public function readDeveloperWithHttpInfo($id_developer)
    {
        // verify the required parameter 'id_developer' is set
        if ($id_developer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_developer when calling readDeveloper');
        }
        if (!preg_match("/^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/", $id_developer)) {
            throw new \InvalidArgumentException("invalid value for \"id_developer\" when calling DevelopersApi.readDeveloper, must conform to the pattern /^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/.");
        }

        // parse inputs
        $resourcePath = "/developers/{id_developer}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_developer !== null) {
            $resourcePath = str_replace(
                "{" . "id_developer" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_developer),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Softonic\DeveloperApiSdk\Client\Model\Developer',
                '/developers/{id_developer}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Softonic\DeveloperApiSdk\Client\Model\Developer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Softonic\DeveloperApiSdk\Client\Model\Developer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation replaceDeveloper
     *
     * Entirely replaces a Developer
     *
     * @param string $id_developer Developer identifier (required)
     * @param \Softonic\DeveloperApiSdk\Client\Model\Developer $body  (optional)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return void
     */
    public function replaceDeveloper($id_developer, $body = null)
    {
        list($response) = $this->replaceDeveloperWithHttpInfo($id_developer, $body);
        return $response;
    }

    /**
     * Operation replaceDeveloperWithHttpInfo
     *
     * Entirely replaces a Developer
     *
     * @param string $id_developer Developer identifier (required)
     * @param \Softonic\DeveloperApiSdk\Client\Model\Developer $body  (optional)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceDeveloperWithHttpInfo($id_developer, $body = null)
    {
        // verify the required parameter 'id_developer' is set
        if ($id_developer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_developer when calling replaceDeveloper');
        }
        if (!preg_match("/^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/", $id_developer)) {
            throw new \InvalidArgumentException("invalid value for \"id_developer\" when calling DevelopersApi.replaceDeveloper, must conform to the pattern /^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/.");
        }

        // parse inputs
        $resourcePath = "/developers/{id_developer}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_developer !== null) {
            $resourcePath = str_replace(
                "{" . "id_developer" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_developer),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/developers/{id_developer}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateDeveloper
     *
     * Partially updates a Developer
     *
     * @param string $id_developer Developer identifier (required)
     * @param \Softonic\DeveloperApiSdk\Client\Model\Developer $body  (optional)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return void
     */
    public function updateDeveloper($id_developer, $body = null)
    {
        list($response) = $this->updateDeveloperWithHttpInfo($id_developer, $body);
        return $response;
    }

    /**
     * Operation updateDeveloperWithHttpInfo
     *
     * Partially updates a Developer
     *
     * @param string $id_developer Developer identifier (required)
     * @param \Softonic\DeveloperApiSdk\Client\Model\Developer $body  (optional)
     * @throws \Softonic\DeveloperApiSdk\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDeveloperWithHttpInfo($id_developer, $body = null)
    {
        // verify the required parameter 'id_developer' is set
        if ($id_developer === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id_developer when calling updateDeveloper');
        }
        if (!preg_match("/^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/", $id_developer)) {
            throw new \InvalidArgumentException("invalid value for \"id_developer\" when calling DevelopersApi.updateDeveloper, must conform to the pattern /^[0-9a-zA-Z](?!.*[\\-]{2})([0-9a-zA-Z\\-]{0,98}[0-9a-zA-Z])?$/.");
        }

        // parse inputs
        $resourcePath = "/developers/{id_developer}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id_developer !== null) {
            $resourcePath = str_replace(
                "{" . "id_developer" . "}",
                $this->apiClient->getSerializer()->toPathValue($id_developer),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/developers/{id_developer}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
